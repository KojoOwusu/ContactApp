{"version":3,"sources":["assets/svgs/phone.svg","assets/svgs/twitter.svg","assets/svgs/email.svg","shared/components/contactInput/ContactInput.tsx","helpers/helpers.ts","components/createContactComponent/createContactComponent.tsx","components/contactItemComponent/contactItemComponent.tsx","api/query.ts","components/contactListComponent/contactListComponent.tsx","components/contactDetailsComponent/contactDetailsComponent.tsx","components/noContactComponent/noContactComponent.tsx","App.tsx","serviceWorker.ts","config/apolloClientsetup.ts","index.tsx","assets/svgs/user.svg"],"names":["module","exports","ContactInput","placeholder","type","icon","value","remove","id","onChange","className","align","justify","gutter","span","e","target","DeleteOutlined","onClick","style","fontSize","getIdFromPath","path","index","lastIndexOf","slice","length","parseInt","Phone","props","editPhoneNumber","newPhoneNumberText","map","val","i","phonenumber","purpose","margin","item","filter","key","marginTop","PlusOutlined","Email","editEmail","email","ADD_CONTACT","gql","EDIT_CONTACT","CreateContactComponent","Name","history","useHistory","pathname","useLocation","Query","useState","firstname","setFirstname","lastname","setLastname","twitterusername","setTwitterusername","emails","setEmails","phonenumbers","setPhonenumbers","useMutation","onCompleted","data","push","createContact","contact","onError","error","refetchQueries","editContact","useLazyQuery","getContact","useEffect","variables","fontFamily","fontWeight","color","src","UserSvg","disabled","ContactItemComponent","contact_id","defaultUserLogo","FETCH_CONTACTS","AddButton","to","shape","size","ContactListComponent","useQuery","loading","console","log","message","contacts","serverData","ContactDetailsComponent","DELETE_STRING","queryState","deleteContact","DataObj","Twitter","danger","userid","NoContactSelectedComponent","App","exact","component","NoContactComponent","Boolean","window","location","hostname","match","link","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","name","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8bef27ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone.0cd1fbd3.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.34ef862a.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.4ac4470c.svg\";","import { DeleteOutlined } from \"@ant-design/icons\";\nimport { Col, Input, Row } from \"antd\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport PropTypes from \"prop-types\";\n\ninterface IContactInput {\n\tplaceholder: string;\n\ttype: string;\n\ticon?: boolean;\n\tvalue?: string;\n\tid?: number;\n\tremove?: (arg0: number) => any;\n\tonChange: (arg1: string) => any;\n}\n\nconst ContactInput: React.FC<IContactInput> = ({\n\tplaceholder,\n\ttype,\n\ticon = false,\n\tvalue,\n\tremove = () => {},\n\tid = 0,\n\tonChange,\n}) => {\n\treturn (\n\t\t<div className=\"contact-input\">\n\t\t\t<p>{placeholder}</p>\n\t\t\t{icon ? (\n\t\t\t\t<Row align=\"middle\" justify=\"center\" gutter={16}>\n\t\t\t\t\t<Col span={22}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\tonChange={(e) => onChange(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={2}>\n\t\t\t\t\t\t<DeleteOutlined\n\t\t\t\t\t\t\tonClick={() => remove(id || 1)}\n\t\t\t\t\t\t\tstyle={{ fontSize: \"1.2rem\" }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t) : (\n\t\t\t\t<Input\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\ttype={type}\n\t\t\t\t\tonChange={(e) => onChange(e.target.value)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nContactInput.propTypes = {\n\tonChange: PropTypes.func.isRequired,\n\tvalue: PropTypes.string.isRequired,\n};\n\nexport default ContactInput;\n","//strips off id from uri params to be passed as id\n\nexport const getIdFromPath = (path: string) => {\n\tvar index = path.lastIndexOf(\":\");\n\tconst id = path.slice(++index, path.length);\n\treturn parseInt(id, 10);\n};\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Col, Image, Row } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport UserSvg from \"../../assets/svgs/user.svg\";\nimport ContactInput from \"../../shared/components/contactInput/ContactInput\";\nimport \"./styles.css\";\nimport { gql, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useHistory } from \"react-router-dom\";\nimport { getIdFromPath } from \"../../helpers/helpers\";\nimport { useLocation } from \"react-router-dom\";\nimport { valueFromAST, ValuesOfCorrectTypeRule } from \"graphql\";\n\nconst Phone = (props: {\n\tonChange: (phoneNumbers: Array<{ phonenumber: string; purpose: string }>) => void;\n\tvalue: any[];\n}) => {\n\tconst { onChange, value } = props;\n\n\tconst addPhone = () => {\n\t\tconst nextValue = { phonenumber: \"\", purpose: \"work\" };\n\t\tonChange([...value, nextValue]);\n\t};\n\n\tconst editPhoneNumber = (id: number, newPhoneNumberText: string) => {\n\t\tonChange(\n\t\t\tvalue.map((val, i) => {\n\t\t\t\tif (i === id) return { phonenumber: newPhoneNumberText, purpose: val.purpose };\n\t\t\t\treturn val;\n\t\t\t})\n\t\t);\n\t};\n\n\tconst removePhone = (id: number) => {\n\t\tonChange(value.filter((item, i) => i !== id));\n\t};\n\n\treturn (\n\t\t<div style={{ margin: 0 }}>\n\t\t\t{value.map((item, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\tremove={() => removePhone(index)}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\teditPhoneNumber(index, e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tvalue={item.phonenumber}\n\t\t\t\t\t\tid={index}\n\t\t\t\t\t\ticon\n\t\t\t\t\t\tplaceholder=\"Phone\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\n\t\t\t<Button\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginTop: \"0.5rem\",\n\t\t\t\t}}\n\t\t\t\ticon={<PlusOutlined />}\n\t\t\t\ttype=\"primary\"\n\t\t\t\tonClick={addPhone}\n\t\t\t>\n\t\t\t\tAdd Phone\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nconst Email = (props: {\n\tonChange: (emails: Array<{ email: string; purpose: string }>) => void;\n\tvalue: any[];\n}) => {\n\tconst { onChange, value } = props;\n\n\tconst addEmail = () => {\n\t\tonChange([...value, { email: \"\", purpose: \"\" }]);\n\t};\n\n\tconst removeEmail = (id: number) => {\n\t\tonChange(value.filter((item, i) => i !== id));\n\t};\n\n\tconst editEmail = (id: number, email: string) => {\n\t\tonChange(\n\t\t\tvalue.map((val, i) => {\n\t\t\t\tif (i === id) return { email, purpose: val.purpose };\n\t\t\t\treturn val;\n\t\t\t})\n\t\t);\n\t};\n\n\treturn (\n\t\t<div style={{ margin: \"0\" }}>\n\t\t\t{value.map((item, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\tremove={() => removeEmail(index)}\n\t\t\t\t\t\tonChange={(value) => {\n\t\t\t\t\t\t\teditEmail(index, value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalue={item.email}\n\t\t\t\t\t\tid={index}\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\ticon\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\n\t\t\t<Button\n\t\t\t\tstyle={{ marginTop: \"0.5rem\" }}\n\t\t\t\ticon={<PlusOutlined />}\n\t\t\t\ttype=\"primary\"\n\t\t\t\tonClick={addEmail}\n\t\t\t>\n\t\t\t\tAdd Email\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\ninterface IContact {\n\tName: string;\n}\nconst ADD_CONTACT = gql`\n\tmutation(\n\t\t$firstname: String!\n\t\t$lastname: String!\n\t\t$phonenumbers: [PhoneNumberInput!]!\n\t\t$emails: [EmailInput!]!\n\t\t$twitterusername: String\n\t) {\n\t\tcreateContact(\n\t\t\tinput: {\n\t\t\t\tfirstname: $firstname\n\t\t\t\tlastname: $lastname\n\t\t\t\tphonenumbers: $phonenumbers\n\t\t\t\temails: $emails\n\t\t\t\ttwitterusername: $twitterusername\n\t\t\t}\n\t\t) {\n\t\t\tcontact {\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst EDIT_CONTACT = gql`\n\tmutation(\n\t\t$id: ID!\n\t\t$firstname: String!\n\t\t$lastname: String!\n\t\t$phonenumbers: [PhoneNumberInput!]!\n\t\t$emails: [EmailInput!]!\n\t\t$twitterusername: String\n\t) {\n\t\teditContact(\n\t\t\tinput: {\n\t\t\t\tid: $id\n\t\t\t\tfirstname: $firstname\n\t\t\t\tlastname: $lastname\n\t\t\t\tphonenumbers: $phonenumbers\n\t\t\t\temails: $emails\n\t\t\t\ttwitterusername: $twitterusername\n\t\t\t}\n\t\t) {\n\t\t\tcontact {\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst CreateContactComponent: React.FunctionComponent<IContact> = ({ Name }) => {\n\tconst history = useHistory();\n\tconst { pathname } = useLocation();\n\n\tconst Query = gql`\n\t\tquery($id: ID!) {\n\t\t\tcontact(id: $id) {\n\t\t\t\tfirstname\n\t\t\t\tlastname\n\t\t\t\tphonenumbers {\n\t\t\t\t\tphonenumber\n\t\t\t\t\tpurpose\n\t\t\t\t}\n\t\t\t\temails {\n\t\t\t\t\temail\n\t\t\t\t\tpurpose\n\t\t\t\t}\n\t\t\t\ttwitterusername\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst [firstname, setFirstname] = useState(\"\");\n\tconst [lastname, setLastname] = useState(\"\");\n\tconst [twitterusername, setTwitterusername] = useState(\"\");\n\tconst [emails, setEmails] = useState<any[]>([{ email: \"\", purpose: \"\" }]);\n\tconst [phonenumbers, setPhonenumbers] = useState<any[]>([{ phonenumber: \"\", purpose: \"work\" }]);\n\n\tconst [createContact, AddContactState] = useMutation(ADD_CONTACT, {\n\t\tonCompleted: (data: any) => {\n\t\t\thistory.push(`/contactDetails:${data.createContact.contact.id}`);\n\t\t},\n\t\tonError: (error: any) => {},\n\t\trefetchQueries: [\"Contacts\"],\n\t});\n\n\tconst [editContact, editContactState] = useMutation(EDIT_CONTACT, {\n\t\tonCompleted: (data: any) => {\n\t\t\thistory.push(`/contactDetails:${data.editContact.contact.id}`);\n\t\t},\n\t\tonError: (error: any) => {},\n\t\trefetchQueries: [\"Contacts\"],\n\t});\n\tconst [getContact, getConstantState] = useLazyQuery(Query, {\n\t\tonCompleted: (data: any) => {\n\t\t\tsetFirstname(data.contact.firstname);\n\t\t\tsetLastname(data.contact.lastname);\n\t\t\tsetPhonenumbers(data.contact.phonenumbers);\n\t\t\tsetEmails(data.contact.emails);\n\t\t\tsetTwitterusername(data.contact.twitterusername);\n\t\t},\n\t\tonError: (error: any) => {},\n\t});\n\n\tuseEffect(() => {\n\t\tif (getIdFromPath(pathname)) {\n\t\t\tgetContact({ variables: { id: getIdFromPath(pathname) } });\n\t\t}\n\t\treturn () => {};\n\t}, []);\n\n\treturn (\n\t\t<form className=\"contact-details\">\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tfontSize: \"1.2rem\",\n\t\t\t\t\tfontFamily: \"Segoe UI\",\n\t\t\t\t\tfontWeight: \"bold\",\n\t\t\t\t\tmarginTop: \"2rem\",\n\t\t\t\t\tcolor: \" rgba(48, 54, 141, 0.8)\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{Name}\n\t\t\t</div>\n\t\t\t<div className=\"image-wrapper\">\n\t\t\t\t<Image className=\"Image\" src={UserSvg} />\n\t\t\t</div>\n\n\t\t\t<div className=\"input-wrapper\">\n\t\t\t\t<Row gutter={[16, 16]}>\n\t\t\t\t\t<Col span={12}>\n\t\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t\tvalue={firstname}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Firstname\"\n\t\t\t\t\t\t\tonChange={setFirstname}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col span={12}>\n\t\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={lastname}\n\t\t\t\t\t\t\tplaceholder=\"Lastname\"\n\t\t\t\t\t\t\tonChange={setLastname}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\n\t\t\t\t<Phone onChange={setPhonenumbers} value={phonenumbers} />\n\n\t\t\t\t<Email onChange={setEmails} value={emails} />\n\n\t\t\t\t<div style={{ margin: \"1rem 0\" }}>\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\tplaceholder=\"Twitter\"\n\t\t\t\t\t\tvalue={twitterusername}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={setTwitterusername}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Button\n\t\t\t\tclassName=\"SaveButton\"\n\t\t\t\ttype=\"primary\"\n\t\t\t\tdisabled={!(firstname && lastname && phonenumbers)}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tif (getIdFromPath(pathname)) {\n\t\t\t\t\t\teditContact({\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tid: getIdFromPath(pathname),\n\t\t\t\t\t\t\t\tfirstname,\n\t\t\t\t\t\t\t\tlastname,\n\t\t\t\t\t\t\t\tphonenumbers,\n\t\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t\t\ttwitterusername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcreateContact({\n\t\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\t\tfirstname,\n\t\t\t\t\t\t\t\tlastname,\n\t\t\t\t\t\t\t\tphonenumbers,\n\t\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t\t\ttwitterusername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</Button>\n\t\t</form>\n\t);\n};\nexport default CreateContactComponent;\n","import React from \"react\";\nimport \"./styles.css\";\nimport defaultUserLogo from \"../../assets/svgs/user.svg\";\n\nexport interface IContactItemProps {\n\tcontact_id: number;\n\tfirstname: string;\n}\n\nconst ContactItemComponent: React.FC<IContactItemProps> = ({ contact_id, firstname }) => {\n\treturn (\n\t\t<div className=\"ContactItem\">\n\t\t\t<img src={defaultUserLogo}></img>\n\t\t\t<div>{firstname}</div>\n\t\t</div>\n\t);\n};\nexport default ContactItemComponent;\n","import { gql } from \"@apollo/client\";\n\n//this file contains all the queries to our graphql api\n\n//query for getting all contacts\nexport const FETCH_CONTACTS = gql`\n\tquery Contacts {\n\t\tcontacts {\n\t\t\tid\n\t\t\tfirstname\n\t\t}\n\t}\n`;\nexport const GET_CONTACT_DETAILS = (id: number) => {\n\treturn gql`\nquery{\n\tcontact(id:${id}){\n\t  firstname\n\t  lastname\n\t  phonenumbers{\n\t\tphonenumber\n\t\tpurpose\n\t  }\n\t  emails{\n\t\temail\n\t\tpurpose\n\t  }\n\t  twitterusername\n\t}\n  }\n`;\n};\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport \"./styles.css\";\nimport PlusSvg from \"../../assets/svgs/plus.svg\";\nimport { Button, Divider } from \"antd\";\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport ContactItemComponent from \"../contactItemComponent/contactItemComponent\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_CONTACTS } from \"../../api/query\";\n\nconst renderContact = (serverData: { id: number; firstname: string }) => {\n\treturn (\n\t\t<Link to={`/contactDetails:${serverData.id}`}>\n\t\t\t<li>\n\t\t\t\t<ContactItemComponent contact_id={serverData.id} firstname={serverData.firstname} />\n\t\t\t</li>\n\t\t</Link>\n\t);\n}; //render flatlist of contact items\n\nconst AddButton: React.FC = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Link to=\"/addContact\">\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"AddButton\"\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tshape=\"circle\"\n\t\t\t\t\ticon={<PlusOutlined />}\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t/>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nconst ContactListComponent: React.FC = () => {\n\tconst { loading, error, data } = useQuery(FETCH_CONTACTS);\n\n\tif (loading) return <p>loading</p>;\n\tif (error) console.log(`Error: ${error.message}`);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"AppHeader\">\n\t\t\t\t<div>Contacts</div>\n\t\t\t\t<AddButton />\n\t\t\t</div>\n\n\t\t\t<div className=\"ContactList\">\n\t\t\t\t{data &&\n\t\t\t\t\tdata.contacts.map((item: { id: number; firstname: string }) => {\n\t\t\t\t\t\tconsole.log(item);\n\t\t\t\t\t\treturn renderContact(item);\n\t\t\t\t\t})}\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default ContactListComponent;\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport UserSvg from \"../../assets/svgs/user.svg\";\nimport Phone from \"../../assets/svgs/phone.svg\";\nimport { Button, Divider } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Twitter from \"../../assets/svgs/twitter.svg\";\nimport \"antd/dist/antd.css\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport Email from \"../../assets/svgs/email.svg\";\nimport { GET_CONTACT_DETAILS } from \"../../api/query\";\nimport { useQuery, gql, useMutation } from \"@apollo/client\";\nimport { getIdFromPath } from \"../../helpers/helpers\";\nimport { useHistory } from \"react-router-dom\";\nimport { FETCH_CONTACTS } from \"../../api/query\";\n\nconst renderPhonenumbers = (DataObj: { phonenumber: string; purpose: string }) => {\n\treturn (\n\t\t<div className=\"ContactInfoField\">\n\t\t\t<div>{DataObj.phonenumber}</div>\n\t\t\t<div>{DataObj.purpose}</div>\n\t\t</div>\n\t);\n};\nconst renderEmails = (DataObj: { email: string; purpose: string }) => {\n\treturn (\n\t\t<div className=\"ContactInfoField\">\n\t\t\t<div>{DataObj.email}</div>\n\t\t\t<div>{DataObj.purpose}</div>\n\t\t</div>\n\t);\n};\nconst deleteHandler = () => {};\n\nconst ContactDetailsComponent: React.FC = (props) => {\n\tconst { pathname } = useLocation();\n\tconst history = useHistory();\n\t//parseInt(id,10)\n\t//const id = parseInt(subStr, 10);\n\tconst Query = gql`\n\tquery{\n\t\tcontact(id:${getIdFromPath(pathname)}){\n\t\t  firstname\n\t\t  lastname\n\t\t  phonenumbers{\n\t\t\tphonenumber\n\t\t\tpurpose\n\t\t  }\n\t\t  emails{\n\t\t\temail\n\t\t\tpurpose\n\t\t  }\n\t\t  twitterusername\n\t\t}\n\t  }\n\t`;\n\n\tconst DELETE_STRING = gql`\n\t\tmutation($userid: ID!) {\n\t\t\tdeleteContact(input: { id: $userid }) {\n\t\t\t\tcontacts {\n\t\t\t\t\tfirstname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst queryState = useQuery(Query);\n\tconst [deleteContact, deleteContactState] = useMutation(DELETE_STRING, {\n\t\tonCompleted: (data: any) => {\n\t\t\thistory.push(\"/\");\n\t\t},\n\t\tonError: (error: any) => {},\n\t\trefetchQueries: [\"Contacts\"],\n\t});\n\n\tif (deleteContactState.loading || queryState.loading) return <p></p>;\n\tif (queryState.error) console.log(`Error: ${queryState.error.message}`);\n\n\treturn (\n\t\t/*<NoContactSelectedComponent />*/\n\n\t\t<div className=\"MainContainer\">\n\t\t\t<div className=\"HeaderArea\">\n\t\t\t\t<img src={UserSvg}></img>\n\n\t\t\t\t<span className=\"ContactName\">{`${queryState.data.contact.firstname} ${queryState.data.contact.lastname}`}</span>\n\t\t\t\t<Link to={`/editContact:${getIdFromPath(pathname)}`}>\n\t\t\t\t\t<Button type=\"link\" size=\"large\" className=\"editButton\">\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\tEdit{\" \"}\n\t\t\t\t\t</Button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\n\t\t\t<div className=\"FieldContainer\">\n\t\t\t\t<div className=\"iconTextHeader\">\n\t\t\t\t\t<img src={Phone}></img>\n\t\t\t\t\tphonenumber\n\t\t\t\t</div>\n\n\t\t\t\t{queryState.data.contact.phonenumbers.map(\n\t\t\t\t\t(item: { phonenumber: string; purpose: string }) => {\n\t\t\t\t\t\treturn renderPhonenumbers(item);\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className=\"FieldContainer\">\n\t\t\t\t<div className=\"iconTextHeader\">\n\t\t\t\t\t<img src={Email}></img>\n\t\t\t\t\temail\n\t\t\t\t</div>\n\t\t\t\t{queryState.data.contact.emails.map((item: { email: string; purpose: string }) => {\n\t\t\t\t\treturn renderEmails(item);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div className=\"FieldContainer\">\n\t\t\t\t<div className=\"iconTextHeader\">\n\t\t\t\t\t<img src={Twitter}></img>\n\t\t\t\t\ttwitter\n\t\t\t\t</div>\n\t\t\t\t<div className=\"ContactInfoField\">{queryState.data.contact.twitterusername}</div>\n\t\t\t</div>\n\t\t\t<Button\n\t\t\t\tclassName=\"deleteButton\"\n\t\t\t\ttype=\"primary\"\n\t\t\t\tdanger\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdeleteContact({\n\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\tuserid: getIdFromPath(pathname),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDELETE\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\nexport default ContactDetailsComponent;\n","import React from \"react\";\nimport \"./styles.css\";\n\nconst NoContactSelectedComponent: React.FC = () => {\n\treturn <div className=\"NoContact\">No Contact Selected</div>;\n};\n\nexport default NoContactSelectedComponent;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport CreateContactComponent from \"../src/components/createContactComponent/createContactComponent\";\nimport { FETCH_CONTACTS } from \"./api/query\";\nimport { useQuery } from \"@apollo/client\";\nimport ContactListComponent from \"./components/contactListComponent/contactListComponent\";\nimport ContactDetailsComponent from \"./components/contactDetailsComponent/contactDetailsComponent\";\nimport NoContactComponent from \"./components/noContactComponent/noContactComponent\";\n\nconst App = () => {\n\t//const [serverData, setData] = useState({});\n\n\treturn (\n\t\t<div className=\"MainWrapper\">\n\t\t\t<div className=\"MainAppWindow\">\n\t\t\t\t<div className=\"ContactsPane\">\n\t\t\t\t\t<ContactListComponent />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"SidePane\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact component={NoContactComponent} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/contactDetails:contact_id\"\n\t\t\t\t\t\t\tcomponent={ContactDetailsComponent}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Route exact path=\"/addContact\">\n\t\t\t\t\t\t\t<CreateContactComponent Name=\"Add Contact\" />\n\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t<Route exact path=\"/editContact:id\">\n\t\t\t\t\t\t\t<CreateContactComponent Name=\"Edit Contact\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { Constants as C } from \"../shared/constants/constants\";\n\n//Apollo cient for handling all requests to graphql api\nconst link = createHttpLink({ uri: \"https://safe-earth-99320.herokuapp.com/graphql\" });\n\nexport const client = new ApolloClient({\n\tlink: link,\n\tcache: new InMemoryCache(),\n\tname: \"contactapp-web-client\",\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./config/apolloClientsetup\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ApolloProvider client={client}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t</ApolloProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user.68f2a6aa.svg\";"],"sourceRoot":""}